using System;
using Foundation;
using InAppSettingsKit;
using MessageUI;
using ObjCRuntime;
using UIKit;
using WebKit;

namespace InAppSettingsKit
{
	// @protocol IASKViewController <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	[BaseType (typeof(NSObject))]
	interface IASKViewController
	{
		// @required @property (nonatomic, strong) IASKSettingsReader * _Nullable settingsReader;
		[Abstract]
		[NullAllowed, Export ("settingsReader", ArgumentSemantic.Strong)]
		IASKSettingsReader SettingsReader { get; set; }

		// @required @property (nonatomic, strong) id<IASKSettingsStore> _Nonnull settingsStore;
		[Abstract]
		[Export ("settingsStore", ArgumentSemantic.Strong)]
		IASKSettingsStore SettingsStore { get; set; }

		// @required @property (copy, nonatomic) void (^ _Nullable)(BOOL) childPaneHandler;
		[Abstract]
		[NullAllowed, Export ("childPaneHandler", ArgumentSemantic.Copy)]
		Action<bool> ChildPaneHandler { get; set; }

		// @required @property (nonatomic, weak) UIViewController<IASKViewController> * _Nullable listParentViewController;
		[Abstract]
		[NullAllowed, Export ("listParentViewController", ArgumentSemantic.Weak)]
		IASKViewController ListParentViewController { get; set; }

		// @optional @property (nonatomic, weak) id _Nullable currentFirstResponder;
		[NullAllowed, Export ("currentFirstResponder", ArgumentSemantic.Weak)]
		NSObject CurrentFirstResponder { get; set; }
	}

	// @protocol IASKSettingsDelegate <UITableViewDelegate>
	[Protocol, Model (AutoGeneratedName = true)]
	interface IASKSettingsDelegate : IUITableViewDelegate
	{
		// @required -(void)settingsViewControllerDidEnd:(IASKAppSettingsViewController * _Nonnull)settingsViewController;
		[Abstract]
		[Export ("settingsViewControllerDidEnd:")]
		void SettingsViewControllerDidEnd (IASKAppSettingsViewController settingsViewController);

		// @optional -(NSString * _Nullable)settingsViewController:(UITableViewController<IASKViewController> * _Nonnull)settingsViewController titleForHeaderInSection:(NSInteger)section specifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:titleForHeaderInSection:specifier:")]
		[return: NullAllowed]
		string SettingsViewController (IASKViewController settingsViewController, nint section, IASKSpecifier specifier);

		// @optional -(CGFloat)settingsViewController:(UITableViewController<IASKViewController> * _Nonnull)settingsViewController heightForHeaderInSection:(NSInteger)section specifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:heightForHeaderInSection:specifier:")]
		nfloat SettingsViewController (IASKViewController settingsViewController, nint section, IASKSpecifier specifier);

		// @optional -(UIView * _Nullable)settingsViewController:(UITableViewController<IASKViewController> * _Nonnull)settingsViewController viewForHeaderInSection:(NSInteger)section specifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:viewForHeaderInSection:specifier:")]
		[return: NullAllowed]
		UIView SettingsViewController (IASKViewController settingsViewController, nint section, IASKSpecifier specifier);

		// @optional -(NSString * _Nullable)settingsViewController:(UITableViewController<IASKViewController> * _Nonnull)settingsViewController titleForFooterInSection:(NSInteger)section specifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:titleForFooterInSection:specifier:")]
		[return: NullAllowed]
		string SettingsViewController (IASKViewController settingsViewController, nint section, IASKSpecifier specifier);

		// @optional -(CGFloat)settingsViewController:(UITableViewController<IASKViewController> * _Nonnull)settingsViewController heightForFooterInSection:(NSInteger)section specifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:heightForFooterInSection:specifier:")]
		nfloat SettingsViewController (IASKViewController settingsViewController, nint section, IASKSpecifier specifier);

		// @optional -(UIView * _Nullable)settingsViewController:(UITableViewController<IASKViewController> * _Nonnull)settingsViewController viewForFooterInSection:(NSInteger)section specifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:viewForFooterInSection:specifier:")]
		[return: NullAllowed]
		UIView SettingsViewController (IASKViewController settingsViewController, nint section, IASKSpecifier specifier);

		// @optional -(CGFloat)settingsViewController:(UITableViewController<IASKViewController> * _Nonnull)settingsViewController heightForSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:heightForSpecifier:")]
		nfloat SettingsViewController (IASKViewController settingsViewController, IASKSpecifier specifier);

		// @optional -(__kindof UITableViewCell * _Nullable)settingsViewController:(UITableViewController<IASKViewController> * _Nonnull)settingsViewController cellForSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:cellForSpecifier:")]
		[return: NullAllowed]
		UITableViewCell SettingsViewController (IASKViewController settingsViewController, IASKSpecifier specifier);

		// @optional -(void)settingsViewController:(IASKAppSettingsViewController * _Nonnull)settingsViewController didSelectCustomViewSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:didSelectCustomViewSpecifier:")]
		void SettingsViewController (IASKAppSettingsViewController settingsViewController, IASKSpecifier specifier);

		// @optional -(BOOL)settingsViewController:(UITableViewController<IASKViewController> * _Nonnull)settingsViewController shouldPresentMailComposeViewController:(MFMailComposeViewController * _Nonnull)mailComposeViewController forSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:shouldPresentMailComposeViewController:forSpecifier:")]
		bool SettingsViewController (IASKViewController settingsViewController, MFMailComposeViewController mailComposeViewController, IASKSpecifier specifier);

		// @optional -(void)settingsViewController:(UITableViewController<IASKViewController> * _Nonnull)settingsViewController mailComposeController:(MFMailComposeViewController * _Nonnull)mailComposeViewController didFinishWithResult:(MFMailComposeResult)result error:(NSError * _Nullable)error;
		[Export ("settingsViewController:mailComposeController:didFinishWithResult:error:")]
		void SettingsViewController (IASKViewController settingsViewController, MFMailComposeViewController mailComposeViewController, MFMailComposeResult result, [NullAllowed] NSError error);

		// @optional -(NSArray * _Nonnull)settingsViewController:(IASKAppSettingsViewController * _Nonnull)settingsViewController valuesForSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:valuesForSpecifier:")]
		[Verify (StronglyTypedNSArray)]
		NSObject[] SettingsViewController (IASKAppSettingsViewController settingsViewController, IASKSpecifier specifier);

		// @optional -(NSArray * _Nonnull)settingsViewController:(IASKAppSettingsViewController * _Nonnull)settingsViewController titlesForSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:titlesForSpecifier:")]
		[Verify (StronglyTypedNSArray)]
		NSObject[] SettingsViewController (IASKAppSettingsViewController settingsViewController, IASKSpecifier specifier);

		// @optional -(void)settingsViewController:(IASKAppSettingsViewController * _Nonnull)settingsViewController buttonTappedForSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:buttonTappedForSpecifier:")]
		void SettingsViewController (IASKAppSettingsViewController settingsViewController, IASKSpecifier specifier);

		// @optional -(IASKValidationResult)settingsViewController:(IASKAppSettingsViewController * _Nonnull)settingsViewController validateSpecifier:(IASKSpecifier * _Nonnull)specifier textField:(IASKTextField * _Nonnull)textField previousValue:(NSString * _Nullable)previousValue replacement:(NSString * _Nonnull * _Nullable)replacement;
		[Export ("settingsViewController:validateSpecifier:textField:previousValue:replacement:")]
		IASKValidationResult SettingsViewController (IASKAppSettingsViewController settingsViewController, IASKSpecifier specifier, IASKTextField textField, [NullAllowed] string previousValue, out string replacement);

		// @optional -(BOOL)settingsViewController:(IASKAppSettingsViewController * _Nonnull)settingsViewController childPaneIsValidForSpecifier:(IASKSpecifier * _Nonnull)specifier contentDictionary:(NSMutableDictionary * _Nonnull)contentDictionary;
		[Export ("settingsViewController:childPaneIsValidForSpecifier:contentDictionary:")]
		bool SettingsViewController (IASKAppSettingsViewController settingsViewController, IASKSpecifier specifier, NSMutableDictionary contentDictionary);

		// @optional -(NSDate * _Nonnull)settingsViewController:(IASKAppSettingsViewController * _Nonnull)settingsViewController dateForSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:dateForSpecifier:")]
		NSDate SettingsViewController (IASKAppSettingsViewController settingsViewController, IASKSpecifier specifier);

		// @optional -(NSString * _Nullable)settingsViewController:(IASKAppSettingsViewController * _Nonnull)settingsViewController datePickerTitleForSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:datePickerTitleForSpecifier:")]
		[return: NullAllowed]
		string SettingsViewController (IASKAppSettingsViewController settingsViewController, IASKSpecifier specifier);

		// @optional -(void)settingsViewController:(IASKAppSettingsViewController * _Nonnull)settingsViewController setDate:(NSDate * _Nonnull)date forSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("settingsViewController:setDate:forSpecifier:")]
		void SettingsViewController (IASKAppSettingsViewController settingsViewController, NSDate date, IASKSpecifier specifier);
	}

	// @interface IASKAppSettingsViewController : UITableViewController <IASKViewController, UITextFieldDelegate, MFMailComposeViewControllerDelegate>
	[BaseType (typeof(UITableViewController))]
	interface IASKAppSettingsViewController : IIASKViewController, IUITextFieldDelegate, IMFMailComposeViewControllerDelegate
	{
		[Wrap ("WeakDelegate")]
		IASKSettingsDelegate Delegate { get; set; }

		// @property (assign, nonatomic) id<IASKSettingsDelegate> _Nonnull delegate __attribute__((iboutlet));
		[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
		NSObject WeakDelegate { get; set; }

		// @property (copy, nonatomic) NSString * _Nonnull file;
		[Export ("file")]
		string File { get; set; }

		// @property (assign, nonatomic) BOOL showCreditsFooter;
		[Export ("showCreditsFooter")]
		bool ShowCreditsFooter { get; set; }

		// @property (assign, nonatomic) BOOL showDoneButton;
		[Export ("showDoneButton")]
		bool ShowDoneButton { get; set; }

		// @property (nonatomic) BOOL neverShowPrivacySettings;
		[Export ("neverShowPrivacySettings")]
		bool NeverShowPrivacySettings { get; set; }

		// @property (nonatomic) BOOL cellLayoutMarginsFollowReadableWidth;
		[Export ("cellLayoutMarginsFollowReadableWidth")]
		bool CellLayoutMarginsFollowReadableWidth { get; set; }

		// -(void)synchronizeSettings;
		[Export ("synchronizeSettings")]
		void SynchronizeSettings ();

		// -(void)dismiss:(id _Nonnull)sender __attribute__((ibaction));
		[Export ("dismiss:")]
		void Dismiss (NSObject sender);

		// @property (nonatomic, strong) NSSet * _Nonnull hiddenKeys;
		[Export ("hiddenKeys", ArgumentSemantic.Strong)]
		NSSet HiddenKeys { get; set; }

		// -(void)setHiddenKeys:(NSSet * _Nonnull)hiddenKeys animated:(BOOL)animated;
		[Export ("setHiddenKeys:animated:")]
		void SetHiddenKeys (NSSet hiddenKeys, bool animated);
	}

	// @interface IASKAppSettingsWebViewController : UIViewController <WKNavigationDelegate, MFMailComposeViewControllerDelegate>
	[BaseType (typeof(UIViewController))]
	interface IASKAppSettingsWebViewController : IWKNavigationDelegate, IMFMailComposeViewControllerDelegate
	{
		// -(id _Nullable)initWithFile:(NSString * _Nonnull)htmlFileName specifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("initWithFile:specifier:")]
		NativeHandle Constructor (string htmlFileName, IASKSpecifier specifier);

		// @property (readonly, nonatomic, strong) WKWebView * _Nullable webView;
		[NullAllowed, Export ("webView", ArgumentSemantic.Strong)]
		WKWebView WebView { get; }

		// @property (readonly, nonatomic, strong) NSURL * _Nonnull url;
		[Export ("url", ArgumentSemantic.Strong)]
		NSUrl Url { get; }

		// @property (nonatomic, strong) NSString * _Nullable customTitle;
		[NullAllowed, Export ("customTitle", ArgumentSemantic.Strong)]
		string CustomTitle { get; set; }
	}

	// @interface IASKColor : UIColor
	[BaseType (typeof(UIColor))]
	interface IASKColor
	{
		// +(UIColor * _Nonnull)iaskPlaceholderColor;
		[Static]
		[Export ("iaskPlaceholderColor")]
		[Verify (MethodToProperty)]
		UIColor IaskPlaceholderColor { get; }
	}

	// @interface IASKDatePicker : UIDatePicker
	[BaseType (typeof(UIDatePicker))]
	interface IASKDatePicker
	{
		// @property (nonatomic, strong) IASKSpecifier * _Nonnull specifier;
		[Export ("specifier", ArgumentSemantic.Strong)]
		IASKSpecifier Specifier { get; set; }

		// @property (getter = isEditing, nonatomic) BOOL editing;
		[Export ("editing")]
		bool Editing { [Bind ("isEditing")] get; set; }
	}

	// @interface IASKDatePickerViewCell : UITableViewCell
	[BaseType (typeof(UITableViewCell))]
	interface IASKDatePickerViewCell
	{
		// @property (nonatomic) IASKDatePicker * _Nonnull datePicker;
		[Export ("datePicker", ArgumentSemantic.Assign)]
		IASKDatePicker DatePicker { get; set; }
	}

	// @interface IASKEmbeddedDatePickerViewCell : UITableViewCell
	[BaseType (typeof(UITableViewCell))]
	interface IASKEmbeddedDatePickerViewCell
	{
		// @property (nonatomic) UILabel * _Nonnull titleLabel;
		[Export ("titleLabel", ArgumentSemantic.Assign)]
		UILabel TitleLabel { get; set; }

		// @property (nonatomic) IASKDatePicker * _Nonnull datePicker;
		[Export ("datePicker", ArgumentSemantic.Assign)]
		IASKDatePicker DatePicker { get; set; }
	}

	// @interface IASKMultipleValueSelection : NSObject
	[BaseType (typeof(NSObject))]
	interface IASKMultipleValueSelection
	{
		// @property (assign, nonatomic) UITableView * _Nullable tableView;
		[NullAllowed, Export ("tableView", ArgumentSemantic.Assign)]
		UITableView TableView { get; set; }

		// @property (readonly, copy, nonatomic) NSIndexPath * _Nonnull checkedIndexPath;
		[Export ("checkedIndexPath", ArgumentSemantic.Copy)]
		NSIndexPath CheckedIndexPath { get; }

		// @property (nonatomic, strong) id<IASKSettingsStore> _Nonnull settingsStore;
		[Export ("settingsStore", ArgumentSemantic.Strong)]
		IASKSettingsStore SettingsStore { get; set; }

		// -(id _Nonnull)initWithSettingsStore:(id<IASKSettingsStore> _Nonnull)settingsStore tableView:(UITableView * _Nullable)tableView specifier:(IASKSpecifier * _Nonnull)specifier section:(NSInteger)section;
		[Export ("initWithSettingsStore:tableView:specifier:section:")]
		NativeHandle Constructor (IASKSettingsStore settingsStore, [NullAllowed] UITableView tableView, IASKSpecifier specifier, nint section);

		// -(void)selectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("selectRowAtIndexPath:")]
		void SelectRowAtIndexPath (NSIndexPath indexPath);

		// -(void)updateSelectionInCell:(UITableViewCell * _Nonnull)cell indexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("updateSelectionInCell:indexPath:")]
		void UpdateSelectionInCell (UITableViewCell cell, NSIndexPath indexPath);
	}

	// @interface IASKPSSliderSpecifierViewCell : UITableViewCell
	[BaseType (typeof(UITableViewCell))]
	interface IASKPSSliderSpecifierViewCell
	{
		// @property (nonatomic, strong) IASKSlider * slider;
		[Export ("slider", ArgumentSemantic.Strong)]
		IASKSlider Slider { get; set; }

		// @property (nonatomic, strong) UIImageView * minImage;
		[Export ("minImage", ArgumentSemantic.Strong)]
		UIImageView MinImage { get; set; }

		// @property (nonatomic, strong) UIImageView * maxImage;
		[Export ("maxImage", ArgumentSemantic.Strong)]
		UIImageView MaxImage { get; set; }
	}

	// @interface IASKPSTextFieldSpecifierViewCell : UITableViewCell
	[BaseType (typeof(UITableViewCell))]
	interface IASKPSTextFieldSpecifierViewCell
	{
		// @property (nonatomic, strong) IASKTextField * textField;
		[Export ("textField", ArgumentSemantic.Strong)]
		IASKTextField TextField { get; set; }
	}

	[Static]
	[Verify (ConstantsInterfaceAssociation)]
	partial interface Constants
	{
		// extern NSString *const _Nonnull IASKSettingChangedNotification;
		[Field ("IASKSettingChangedNotification", "__Internal")]
		NSString IASKSettingChangedNotification { get; }
	}

	// @interface IASKSettingsReader : NSObject
	[BaseType (typeof(NSObject))]
	interface IASKSettingsReader
	{
		// -(id _Nonnull)initWithFile:(NSString * _Nonnull)file bundle:(NSBundle * _Nonnull)bundle;
		[Export ("initWithFile:bundle:")]
		NativeHandle Constructor (string file, NSBundle bundle);

		// -(id _Nonnull)initWithFile:(NSString * _Nonnull)file;
		[Export ("initWithFile:")]
		NativeHandle Constructor (string file);

		// @property (readonly, nonatomic) NSInteger numberOfSections;
		[Export ("numberOfSections")]
		nint NumberOfSections { get; }

		// -(NSInteger)numberOfRowsInSection:(NSInteger)section;
		[Export ("numberOfRowsInSection:")]
		nint NumberOfRowsInSection (nint section);

		// -(IASKSpecifier * _Nullable)specifierForIndexPath:(NSIndexPath * _Nonnull)indexPath;
		[Export ("specifierForIndexPath:")]
		[return: NullAllowed]
		IASKSpecifier SpecifierForIndexPath (NSIndexPath indexPath);

		// -(IASKSpecifier * _Nullable)headerSpecifierForSection:(NSInteger)section;
		[Export ("headerSpecifierForSection:")]
		[return: NullAllowed]
		IASKSpecifier HeaderSpecifierForSection (nint section);

		// -(NSIndexPath * _Nullable)indexPathForKey:(NSString * _Nonnull)key;
		[Export ("indexPathForKey:")]
		[return: NullAllowed]
		NSIndexPath IndexPathForKey (string key);

		// -(IASKSpecifier * _Nullable)specifierForKey:(NSString * _Nonnull)key;
		[Export ("specifierForKey:")]
		[return: NullAllowed]
		IASKSpecifier SpecifierForKey (string key);

		// -(NSString * _Nullable)titleForSection:(NSInteger)section;
		[Export ("titleForSection:")]
		[return: NullAllowed]
		string TitleForSection (nint section);

		// -(NSString * _Nullable)keyForSection:(NSInteger)section;
		[Export ("keyForSection:")]
		[return: NullAllowed]
		string KeyForSection (nint section);

		// -(NSString * _Nullable)footerTextForSection:(NSInteger)section;
		[Export ("footerTextForSection:")]
		[return: NullAllowed]
		string FooterTextForSection (nint section);

		// -(NSString * _Nullable)titleForId:(NSObject * _Nullable)titleId;
		[Export ("titleForId:")]
		[return: NullAllowed]
		string TitleForId ([NullAllowed] NSObject titleId);

		// -(NSString * _Nonnull)pathForImageNamed:(NSString * _Nonnull)image;
		[Export ("pathForImageNamed:")]
		string PathForImageNamed (string image);

		// -(NSString * _Nullable)locateSettingsFile:(NSString * _Nonnull)file;
		[Export ("locateSettingsFile:")]
		[return: NullAllowed]
		string LocateSettingsFile (string file);

		// -(NSDictionary<NSString *,id> * _Nonnull)gatherDefaultsLimitedToEditableFields:(BOOL)limitedToEditableFields;
		[Export ("gatherDefaultsLimitedToEditableFields:")]
		NSDictionary<NSString, NSObject> GatherDefaultsLimitedToEditableFields (bool limitedToEditableFields);

		// -(void)applyDefaultsToStore;
		[Export ("applyDefaultsToStore")]
		void ApplyDefaultsToStore ();

		// @property (readonly, nonatomic) NSBundle * _Nonnull applicationBundle;
		[Export ("applicationBundle")]
		NSBundle ApplicationBundle { get; }

		// @property (readonly, nonatomic) NSBundle * _Nonnull settingsBundle;
		[Export ("settingsBundle")]
		NSBundle SettingsBundle { get; }

		// @property (readonly, nonatomic) NSDictionary * _Nonnull settingsDictionary;
		[Export ("settingsDictionary")]
		NSDictionary SettingsDictionary { get; }

		// @property (nonatomic, strong) NSString * _Nonnull localizationTable;
		[Export ("localizationTable", ArgumentSemantic.Strong)]
		string LocalizationTable { get; set; }

		// @property (readonly, nonatomic) NSBundle * _Nonnull iaskBundle;
		[Export ("iaskBundle")]
		NSBundle IaskBundle { get; }

		[Wrap ("WeakDataSource")]
		[Verify (StronglyTypedNSArray)]
		NSObject[] DataSource { get; set; }

		// @property (nonatomic, strong) NSArray * _Nonnull dataSource;
		[NullAllowed, Export ("dataSource", ArgumentSemantic.Strong)]
		NSObject WeakDataSource { get; set; }

		// @property (nonatomic, strong) NSSet * _Nullable hiddenKeys;
		[NullAllowed, Export ("hiddenKeys", ArgumentSemantic.Strong)]
		NSSet HiddenKeys { get; set; }

		// @property (nonatomic) BOOL showPrivacySettings;
		[Export ("showPrivacySettings")]
		bool ShowPrivacySettings { get; set; }

		// @property (nonatomic, weak) id<IASKSettingsStore> _Nullable settingsStore;
		[NullAllowed, Export ("settingsStore", ArgumentSemantic.Weak)]
		IASKSettingsStore SettingsStore { get; set; }

		// @property (nonatomic, strong) IASKSpecifier * _Nullable selectedSpecifier;
		[NullAllowed, Export ("selectedSpecifier", ArgumentSemantic.Strong)]
		IASKSpecifier SelectedSpecifier { get; set; }
	}

	// @protocol IASKSettingsStore <NSObject>
	/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
	[BaseType (typeof(NSObject))]
	interface IASKSettingsStore
	{
		// @required -(void)setBool:(BOOL)value forSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Abstract]
		[Export ("setBool:forSpecifier:")]
		void SetBool (bool value, IASKSpecifier specifier);

		// @required -(void)setFloat:(float)value forSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Abstract]
		[Export ("setFloat:forSpecifier:")]
		void SetFloat (float value, IASKSpecifier specifier);

		// @required -(void)setDouble:(double)value forSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Abstract]
		[Export ("setDouble:forSpecifier:")]
		void SetDouble (double value, IASKSpecifier specifier);

		// @required -(void)setInteger:(NSInteger)value forSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Abstract]
		[Export ("setInteger:forSpecifier:")]
		void SetInteger (nint value, IASKSpecifier specifier);

		// @required -(void)setObject:(id _Nullable)value forSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Abstract]
		[Export ("setObject:forSpecifier:")]
		void SetObject ([NullAllowed] NSObject value, IASKSpecifier specifier);

		// @required -(BOOL)boolForSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Abstract]
		[Export ("boolForSpecifier:")]
		bool BoolForSpecifier (IASKSpecifier specifier);

		// @required -(float)floatForSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Abstract]
		[Export ("floatForSpecifier:")]
		float FloatForSpecifier (IASKSpecifier specifier);

		// @required -(double)doubleForSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Abstract]
		[Export ("doubleForSpecifier:")]
		double DoubleForSpecifier (IASKSpecifier specifier);

		// @required -(NSInteger)integerForSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Abstract]
		[Export ("integerForSpecifier:")]
		nint IntegerForSpecifier (IASKSpecifier specifier);

		// @required -(id _Nullable)objectForSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Abstract]
		[Export ("objectForSpecifier:")]
		[return: NullAllowed]
		NSObject ObjectForSpecifier (IASKSpecifier specifier);

		// @required -(BOOL)synchronize;
		[Abstract]
		[Export ("synchronize")]
		[Verify (MethodToProperty)]
		bool Synchronize { get; }

		// @required -(void)setArray:(NSArray * _Nonnull)array forSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Abstract]
		[Export ("setArray:forSpecifier:")]
		[Verify (StronglyTypedNSArray)]
		void SetArray (NSObject[] array, IASKSpecifier specifier);

		// @required -(NSArray * _Nonnull)arrayForSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Abstract]
		[Export ("arrayForSpecifier:")]
		[Verify (StronglyTypedNSArray)]
		NSObject[] ArrayForSpecifier (IASKSpecifier specifier);

		// @required -(void)addObject:(NSObject * _Nonnull)object forSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Abstract]
		[Export ("addObject:forSpecifier:")]
		void AddObject (NSObject @object, IASKSpecifier specifier);

		// @required -(void)removeObjectWithSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Abstract]
		[Export ("removeObjectWithSpecifier:")]
		void RemoveObjectWithSpecifier (IASKSpecifier specifier);

		// @optional -(void)setObject:(id _Nonnull)value forKey:(NSString * _Nonnull)key;
		[Export ("setObject:forKey:")]
		void SetObject (NSObject value, string key);

		// @optional -(id _Nullable)objectForKey:(NSString * _Nonnull)key;
		[Export ("objectForKey:")]
		[return: NullAllowed]
		NSObject ObjectForKey (string key);
	}

	// @interface IASKAbstractSettingsStore : NSObject <IASKSettingsStore>
	[BaseType (typeof(NSObject))]
	interface IASKAbstractSettingsStore : IIASKSettingsStore
	{
	}

	// @interface IASKSettingsStoreFile : IASKAbstractSettingsStore
	[BaseType (typeof(IASKAbstractSettingsStore))]
	interface IASKSettingsStoreFile
	{
		// -(id _Nonnull)initWithPath:(NSString * _Nonnull)path;
		[Export ("initWithPath:")]
		NativeHandle Constructor (string path);

		// @property (readonly, copy, nonatomic) NSString * _Nonnull filePath;
		[Export ("filePath")]
		string FilePath { get; }
	}

	// @interface IASKSettingsStoreInMemory : IASKAbstractSettingsStore
	[BaseType (typeof(IASKAbstractSettingsStore))]
	interface IASKSettingsStoreInMemory
	{
		// @property (readwrite, nonatomic, strong) NSMutableDictionary * _Nonnull dictionary;
		[Export ("dictionary", ArgumentSemantic.Strong)]
		NSMutableDictionary Dictionary { get; set; }

		// -(id _Nonnull)initWithDictionary:(NSDictionary * _Nonnull)dictionary;
		[Export ("initWithDictionary:")]
		NativeHandle Constructor (NSDictionary dictionary);
	}

	// @interface IASKSettingsStoreUserDefaults : IASKAbstractSettingsStore
	[BaseType (typeof(IASKAbstractSettingsStore))]
	interface IASKSettingsStoreUserDefaults
	{
		// -(id _Nonnull)initWithUserDefaults:(NSUserDefaults * _Nonnull)defaults;
		[Export ("initWithUserDefaults:")]
		NativeHandle Constructor (NSUserDefaults defaults);

		// @property (readonly, nonatomic, strong) NSUserDefaults * _Nonnull defaults;
		[Export ("defaults", ArgumentSemantic.Strong)]
		NSUserDefaults Defaults { get; }
	}

	// @interface IASKSlider : UISlider
	[BaseType (typeof(UISlider))]
	interface IASKSlider
	{
		// @property (nonatomic, strong) IASKSpecifier * specifier;
		[Export ("specifier", ArgumentSemantic.Strong)]
		IASKSpecifier Specifier { get; set; }
	}

	// @interface IASKSpecifier : NSObject
	[BaseType (typeof(NSObject))]
	interface IASKSpecifier
	{
		// -(id _Nonnull)initWithSpecifier:(NSDictionary * _Nonnull)specifier;
		[Export ("initWithSpecifier:")]
		NativeHandle Constructor (NSDictionary specifier);

		// @property (readonly, nonatomic, strong) NSDictionary * _Nonnull specifierDict;
		[Export ("specifierDict", ArgumentSemantic.Strong)]
		NSDictionary SpecifierDict { get; }

		// @property (nonatomic, weak) IASKSettingsReader * _Nullable settingsReader;
		[NullAllowed, Export ("settingsReader", ArgumentSemantic.Weak)]
		IASKSettingsReader SettingsReader { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable key;
		[NullAllowed, Export ("key")]
		string Key { get; set; }

		// @property (copy, nonatomic) NSString * _Nullable title;
		[NullAllowed, Export ("title")]
		string Title { get; set; }

		// @property (readonly, copy, nonatomic) NSString * _Nullable subtitle;
		[NullAllowed, Export ("subtitle")]
		string Subtitle { get; }

		// @property (readonly, nonatomic) BOOL hasSubtitle;
		[Export ("hasSubtitle")]
		bool HasSubtitle { get; }

		// -(NSString * _Nullable)subtitleForValue:(id _Nullable)value;
		[Export ("subtitleForValue:")]
		[return: NullAllowed]
		string SubtitleForValue ([NullAllowed] NSObject value);

		// @property (readonly, copy, nonatomic) NSString * _Nonnull type;
		[Export ("type")]
		string Type { get; }

		// @property (readonly, nonatomic, strong) id _Nullable defaultValue;
		[NullAllowed, Export ("defaultValue", ArgumentSemantic.Strong)]
		NSObject DefaultValue { get; }

		// @property (readonly, nonatomic, strong) id _Nullable defaultStringValue;
		[NullAllowed, Export ("defaultStringValue", ArgumentSemantic.Strong)]
		NSObject DefaultStringValue { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nullable footerText;
		[NullAllowed, Export ("footerText")]
		string FooterText { get; }

		// @property (readonly, nonatomic, strong) UIImage * _Nullable cellImage;
		[NullAllowed, Export ("cellImage", ArgumentSemantic.Strong)]
		UIImage CellImage { get; }

		// @property (readonly, nonatomic, strong) UIImage * _Nullable highlightedCellImage;
		[NullAllowed, Export ("highlightedCellImage", ArgumentSemantic.Strong)]
		UIImage HighlightedCellImage { get; }

		// @property (readonly, nonatomic, strong) NSArray * _Nullable userInterfaceIdioms;
		[NullAllowed, Export ("userInterfaceIdioms", ArgumentSemantic.Strong)]
		[Verify (StronglyTypedNSArray)]
		NSObject[] UserInterfaceIdioms { get; }

		// @property (readonly, nonatomic) BOOL adjustsFontSizeToFitWidth;
		[Export ("adjustsFontSizeToFitWidth")]
		bool AdjustsFontSizeToFitWidth { get; }

		// @property (readonly, nonatomic) NSTextAlignment textAlignment;
		[Export ("textAlignment")]
		NSTextAlignment TextAlignment { get; }

		// -(NSString * _Nullable)localizedObjectForKey:(NSString * _Nonnull)key;
		[Export ("localizedObjectForKey:")]
		[return: NullAllowed]
		string LocalizedObjectForKey (string key);

		// -(NSString * _Nullable)titleForCurrentValue:(id _Nullable)currentValue;
		[Export ("titleForCurrentValue:")]
		[return: NullAllowed]
		string TitleForCurrentValue ([NullAllowed] NSObject currentValue);

		// @property (readonly, nonatomic) float minimumValue;
		[Export ("minimumValue")]
		float MinimumValue { get; }

		// @property (readonly, nonatomic) float maximumValue;
		[Export ("maximumValue")]
		float MaximumValue { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nullable minimumValueImage;
		[NullAllowed, Export ("minimumValueImage")]
		string MinimumValueImage { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nullable maximumValueImage;
		[NullAllowed, Export ("maximumValueImage")]
		string MaximumValueImage { get; }

		// @property (readonly, nonatomic, strong) id _Nullable trueValue;
		[NullAllowed, Export ("trueValue", ArgumentSemantic.Strong)]
		NSObject TrueValue { get; }

		// @property (readonly, nonatomic, strong) id _Nullable falseValue;
		[NullAllowed, Export ("falseValue", ArgumentSemantic.Strong)]
		NSObject FalseValue { get; }

		// @property (readonly, nonatomic) IASKToggleStyle toggleStyle;
		[Export ("toggleStyle")]
		IASKToggleStyle ToggleStyle { get; }

		// @property (readonly, nonatomic) BOOL defaultBoolValue;
		[Export ("defaultBoolValue")]
		bool DefaultBoolValue { get; }

		// @property (readonly, nonatomic) BOOL isSecure;
		[Export ("isSecure")]
		bool IsSecure { get; }

		// @property (readonly, nonatomic) UIKeyboardType keyboardType;
		[Export ("keyboardType")]
		UIKeyboardType KeyboardType { get; }

		// @property (readonly, nonatomic) UITextAutocapitalizationType autocapitalizationType;
		[Export ("autocapitalizationType")]
		UITextAutocapitalizationType AutocapitalizationType { get; }

		// @property (readonly, nonatomic) UITextAutocorrectionType autoCorrectionType;
		[Export ("autoCorrectionType")]
		UITextAutocorrectionType AutoCorrectionType { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nullable placeholder;
		[NullAllowed, Export ("placeholder")]
		string Placeholder { get; }

		// @property (readonly, copy, nonatomic) UITextContentType _Nullable textContentType;
		[NullAllowed, Export ("textContentType")]
		string TextContentType { get; }

		// -(id _Nonnull)initWithSpecifier:(NSDictionary * _Nonnull)specifier radioGroupValue:(NSString * _Nonnull)radioGroupValue;
		[Export ("initWithSpecifier:radioGroupValue:")]
		NativeHandle Constructor (NSDictionary specifier, string radioGroupValue);

		// @property (readonly, copy, nonatomic) NSString * _Nullable radioGroupValue;
		[NullAllowed, Export ("radioGroupValue")]
		string RadioGroupValue { get; }

		// @property (readonly, nonatomic) NSInteger multipleValuesCount;
		[Export ("multipleValuesCount")]
		nint MultipleValuesCount { get; }

		// @property (readonly, nonatomic, strong) NSArray * _Nullable multipleValues;
		[NullAllowed, Export ("multipleValues", ArgumentSemantic.Strong)]
		[Verify (StronglyTypedNSArray)]
		NSObject[] MultipleValues { get; }

		// @property (readonly, nonatomic, strong) NSArray * _Nullable multipleTitles;
		[NullAllowed, Export ("multipleTitles", ArgumentSemantic.Strong)]
		[Verify (StronglyTypedNSArray)]
		NSObject[] MultipleTitles { get; }

		// @property (readonly, nonatomic, strong) NSArray * _Nullable multipleIconNames;
		[NullAllowed, Export ("multipleIconNames", ArgumentSemantic.Strong)]
		[Verify (StronglyTypedNSArray)]
		NSObject[] MultipleIconNames { get; }

		// @property (readonly, nonatomic) BOOL displaySortedByTitle;
		[Export ("displaySortedByTitle")]
		bool DisplaySortedByTitle { get; }

		// -(void)setMultipleValuesDictValues:(NSArray * _Nonnull)values titles:(NSArray * _Nonnull)titles;
		[Export ("setMultipleValuesDictValues:titles:")]
		[Verify (StronglyTypedNSArray), Verify (StronglyTypedNSArray)]
		void SetMultipleValuesDictValues (NSObject[] values, NSObject[] titles);

		// -(void)sortIfNeeded;
		[Export ("sortIfNeeded")]
		void SortIfNeeded ();

		// @property (readonly, copy, nonatomic) NSString * _Nullable file;
		[NullAllowed, Export ("file")]
		string File { get; }

		// @property (readonly, nonatomic) Class _Nullable viewControllerClass;
		[NullAllowed, Export ("viewControllerClass")]
		Class ViewControllerClass { get; }

		// @property (readonly, nonatomic) SEL _Nullable viewControllerSelector;
		[NullAllowed, Export ("viewControllerSelector")]
		Selector ViewControllerSelector { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nullable viewControllerStoryBoardFile;
		[NullAllowed, Export ("viewControllerStoryBoardFile")]
		string ViewControllerStoryBoardFile { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nullable viewControllerStoryBoardID;
		[NullAllowed, Export ("viewControllerStoryBoardID")]
		string ViewControllerStoryBoardID { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nullable segueIdentifier;
		[NullAllowed, Export ("segueIdentifier")]
		string SegueIdentifier { get; }

		// @property (readonly, nonatomic, strong) IASKSpecifier * _Nullable parentSpecifier;
		[NullAllowed, Export ("parentSpecifier", ArgumentSemantic.Strong)]
		IASKSpecifier ParentSpecifier { get; }

		// -(IASKSpecifier * _Nullable)itemSpecifierForIndex:(NSUInteger)index;
		[Export ("itemSpecifierForIndex:")]
		[return: NullAllowed]
		IASKSpecifier ItemSpecifierForIndex (nuint index);

		// @property (readonly, nonatomic) NSUInteger itemIndex;
		[Export ("itemIndex")]
		nuint ItemIndex { get; }

		// @property (readonly, nonatomic) BOOL isItemSpecifier;
		[Export ("isItemSpecifier")]
		bool IsItemSpecifier { get; }

		// @property (readonly, nonatomic, strong) IASKSpecifier * _Nullable addSpecifier;
		[NullAllowed, Export ("addSpecifier", ArgumentSemantic.Strong)]
		IASKSpecifier AddSpecifier { get; }

		// @property (readonly, nonatomic) BOOL isAddSpecifier;
		[Export ("isAddSpecifier")]
		bool IsAddSpecifier { get; }

		// @property (readonly, nonatomic) BOOL deletable;
		[Export ("deletable")]
		bool Deletable { get; }

		// @property (readonly, nonatomic) UIDatePickerMode datePickerMode;
		[Export ("datePickerMode")]
		UIDatePickerMode DatePickerMode { get; }

		// @property (readonly, nonatomic) UIDatePickerStyle datePickerStyle __attribute__((availability(ios, introduced=13.4)));
		[iOS (13, 4)]
		[Export ("datePickerStyle")]
		UIDatePickerStyle DatePickerStyle { get; }

		// @property (readonly, nonatomic) NSInteger datePickerMinuteInterval;
		[Export ("datePickerMinuteInterval")]
		nint DatePickerMinuteInterval { get; }

		// @property (readonly, nonatomic) BOOL embeddedDatePicker;
		[Export ("embeddedDatePicker")]
		bool EmbeddedDatePicker { get; }

		// @property (readonly, nonatomic, strong) IASKSpecifier * _Nonnull editSpecifier;
		[Export ("editSpecifier", ArgumentSemantic.Strong)]
		IASKSpecifier EditSpecifier { get; }
	}

	// @interface IASKSpecifierValuesViewController : UITableViewController <IASKViewController>
	[BaseType (typeof(UITableViewController))]
	interface IASKSpecifierValuesViewController : IIASKViewController
	{
		// -(id _Nonnull)initWithSpecifier:(IASKSpecifier * _Nonnull)specifier;
		[Export ("initWithSpecifier:")]
		NativeHandle Constructor (IASKSpecifier specifier);

		// -(id _Nonnull)initWithSpecifier:(IASKSpecifier * _Nonnull)specifier style:(UITableViewStyle)style;
		[Export ("initWithSpecifier:style:")]
		NativeHandle Constructor (IASKSpecifier specifier, UITableViewStyle style);
	}

	// @interface IASKSwitch : UISwitch
	[BaseType (typeof(UISwitch))]
	interface IASKSwitch
	{
		// @property (nonatomic, strong) IASKSpecifier * specifier;
		[Export ("specifier", ArgumentSemantic.Strong)]
		IASKSpecifier Specifier { get; set; }
	}

	// @interface IASKTextField : UITextField
	[BaseType (typeof(UITextField))]
	interface IASKTextField
	{
		// @property (nonatomic, strong) IASKSpecifier * _Nonnull specifier;
		[Export ("specifier", ArgumentSemantic.Strong)]
		IASKSpecifier Specifier { get; set; }

		// @property (readonly, nonatomic, strong) NSString * _Nullable oldText;
		[NullAllowed, Export ("oldText", ArgumentSemantic.Strong)]
		string OldText { get; }

		// -(void)shake;
		[Export ("shake")]
		void Shake ();
	}

	// @interface IASKTextView : UITextView
	[BaseType (typeof(UITextView))]
	interface IASKTextView
	{
		// @property (nonatomic, strong) IASKSpecifier * specifier;
		[Export ("specifier", ArgumentSemantic.Strong)]
		IASKSpecifier Specifier { get; set; }

		// @property (nonatomic, strong) NSString * placeholder;
		[Export ("placeholder", ArgumentSemantic.Strong)]
		string Placeholder { get; set; }
	}

	// @interface IASKTextViewCell : UITableViewCell
	[BaseType (typeof(UITableViewCell))]
	interface IASKTextViewCell
	{
		// @property (nonatomic, strong) IASKTextView * textView;
		[Export ("textView", ArgumentSemantic.Strong)]
		IASKTextView TextView { get; set; }
	}

	[Static]
	[Verify (ConstantsInterfaceAssociation)]
	partial interface Constants
	{
		// extern double InAppSettingsKitVersionNumber;
		[Field ("InAppSettingsKitVersionNumber", "__Internal")]
		double InAppSettingsKitVersionNumber { get; }

		// extern const unsigned char[] InAppSettingsKitFrameworkVersionString;
		[Field ("InAppSettingsKitFrameworkVersionString", "__Internal")]
		byte[] InAppSettingsKitFrameworkVersionString { get; }
	}
}
